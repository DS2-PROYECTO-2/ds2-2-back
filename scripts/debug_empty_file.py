#!/usr/bin/env python
"""
Script para diagnosticar por qu√© los archivos se generan vac√≠os
"""
import os
import sys
import django

# Configurar Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ds2_back.settings.development')
django.setup()

from export.services import MonitorDataExporter
from export.models import ExportJob
from users.models import User
from io import BytesIO
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet

def test_simple_pdf_generation():
    """Probar generaci√≥n de PDF simple paso a paso"""
    print("üß™ Probando generaci√≥n de PDF simple...")
    
    try:
        # Crear buffer
        buffer = BytesIO()
        print(f"‚úÖ Buffer creado: {type(buffer)}")
        
        # Crear documento
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        print("‚úÖ Documento creado")
        
        # Crear contenido
        story = []
        styles = getSampleStyleSheet()
        
        title = Paragraph("Test PDF", styles['Title'])
        story.append(title)
        story.append(Spacer(1, 20))
        
        content = Paragraph("Este es un PDF de prueba.", styles['Normal'])
        story.append(content)
        
        print(f"‚úÖ Story creada con {len(story)} elementos")
        
        # Construir PDF
        print("üî® Construyendo PDF...")
        doc.build(story)
        print("‚úÖ PDF construido")
        
        # Verificar contenido
        buffer.seek(0)
        pdf_content = buffer.getvalue()
        print(f"‚úÖ Contenido obtenido: {len(pdf_content)} bytes")
        
        if len(pdf_content) == 0:
            print("‚ùå PROBLEMA: El PDF est√° vac√≠o!")
            return False
        
        if pdf_content.startswith(b'%PDF'):
            print("‚úÖ PDF v√°lido generado")
        else:
            print("‚ùå PDF inv√°lido")
            print(f"   - Inicio: {pdf_content[:50]}")
            return False
        
        buffer.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_export_with_debug():
    """Probar exportaci√≥n con debugging detallado"""
    print("\nüß™ Probando exportaci√≥n con debugging...")
    
    try:
        # Obtener usuario admin
        admin_user = User.objects.filter(role=User.ADMIN).first()
        if not admin_user:
            print("‚ùå No se encontr√≥ usuario admin")
            return False
        
        # Crear trabajo de exportaci√≥n
        export_job = ExportJob.objects.create(
            title="Debug Empty File",
            export_type=ExportJob.MONITORS_DATA,
            format=ExportJob.PDF,
            status=ExportJob.PENDING,
            requested_by=admin_user
        )
        
        print(f"‚úÖ Trabajo creado: ID {export_job.id}")
        
        # Crear exporter
        exporter = MonitorDataExporter(export_job)
        
        # Verificar datos
        monitors = exporter.get_monitors_queryset()
        print(f"‚úÖ Monitores encontrados: {monitors.count()}")
        
        if monitors.count() == 0:
            print("‚ö†Ô∏è  No hay monitores - esto puede causar archivo vac√≠o")
        
        # Probar generaci√≥n paso a paso
        print("üî® Iniciando generaci√≥n...")
        
        # Crear buffer manualmente para debug
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        story = []
        
        # Agregar contenido m√≠nimo
        styles = getSampleStyleSheet()
        title = Paragraph("Reporte de Monitores", styles['Title'])
        story.append(title)
        story.append(Spacer(1, 20))
        
        if monitors.count() > 0:
            content = Paragraph(f"Total de monitores: {monitors.count()}", styles['Normal'])
            story.append(content)
        else:
            content = Paragraph("No hay monitores para mostrar", styles['Normal'])
            story.append(content)
        
        print(f"‚úÖ Story preparada con {len(story)} elementos")
        
        # Construir PDF
        doc.build(story)
        print("‚úÖ PDF construido")
        
        # Verificar contenido
        buffer.seek(0)
        pdf_content = buffer.getvalue()
        print(f"‚úÖ Contenido: {len(pdf_content)} bytes")
        
        if len(pdf_content) == 0:
            print("‚ùå PROBLEMA: PDF generado est√° vac√≠o!")
            return False
        
        # Simular el proceso de guardado
        from django.core.files import File
        django_file = File(BytesIO(pdf_content))
        
        # Guardar archivo
        export_job.file.save(
            f"debug_export_{export_job.id}.pdf",
            django_file,
            save=True
        )
        
        print(f"‚úÖ Archivo guardado: {export_job.file.name}")
        
        # Verificar archivo guardado
        with export_job.file.open('rb') as f:
            saved_content = f.read()
            print(f"‚úÖ Archivo guardado: {len(saved_content)} bytes")
            
            if len(saved_content) == 0:
                print("‚ùå PROBLEMA: Archivo guardado est√° vac√≠o!")
                return False
        
        # Marcar como completado
        export_job.mark_as_completed(file_size=len(pdf_content))
        print("‚úÖ Trabajo marcado como completado")
        
        buffer.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Error en exportaci√≥n: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_real_export():
    """Probar la exportaci√≥n real"""
    print("\nüß™ Probando exportaci√≥n real...")
    
    try:
        # Obtener usuario admin
        admin_user = User.objects.filter(role=User.ADMIN).first()
        if not admin_user:
            print("‚ùå No se encontr√≥ usuario admin")
            return False
        
        # Crear trabajo de exportaci√≥n
        export_job = ExportJob.objects.create(
            title="Real Export Test",
            export_type=ExportJob.MONITORS_DATA,
            format=ExportJob.PDF,
            status=ExportJob.PENDING,
            requested_by=admin_user
        )
        
        print(f"‚úÖ Trabajo creado: ID {export_job.id}")
        
        # Crear exporter
        exporter = MonitorDataExporter(export_job)
        
        # Ejecutar exportaci√≥n real
        print("üî® Ejecutando exportaci√≥n real...")
        success = exporter.export_to_pdf()
        
        if success:
            print("‚úÖ Exportaci√≥n exitosa")
            print(f"   - Estado: {export_job.get_status_display()}")
            print(f"   - Archivo: {export_job.file.name if export_job.file else 'No generado'}")
            print(f"   - Tama√±o: {export_job.file_size} bytes")
            
            # Verificar archivo
            if export_job.file:
                with export_job.file.open('rb') as f:
                    file_content = f.read()
                    print(f"   - Contenido real: {len(file_content)} bytes")
                    
                    if len(file_content) == 0:
                        print("‚ùå PROBLEMA: Archivo real est√° vac√≠o!")
                        return False
                    else:
                        print("‚úÖ Archivo real tiene contenido")
                        return True
            else:
                print("‚ùå PROBLEMA: No se gener√≥ archivo")
                return False
        else:
            print("‚ùå Exportaci√≥n fall√≥")
            print(f"   - Error: {export_job.error_message}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en exportaci√≥n real: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Funci√≥n principal"""
    print("üîç Diagn√≥stico de archivos vac√≠os")
    print("=" * 50)
    
    # Prueba 1: PDF simple
    simple_success = test_simple_pdf_generation()
    
    # Prueba 2: Exportaci√≥n con debug
    debug_success = test_export_with_debug()
    
    # Prueba 3: Exportaci√≥n real
    real_success = test_real_export()
    
    # Resumen
    print("\nüìä Resumen del diagn√≥stico:")
    print(f"   - PDF simple: {'‚úÖ' if simple_success else '‚ùå'}")
    print(f"   - Exportaci√≥n debug: {'‚úÖ' if debug_success else '‚ùå'}")
    print(f"   - Exportaci√≥n real: {'‚úÖ' if real_success else '‚ùå'}")
    
    if not simple_success:
        print("\n‚ùå PROBLEMA: Reportlab no funciona correctamente")
    elif not debug_success:
        print("\n‚ùå PROBLEMA: Hay un error en la l√≥gica de exportaci√≥n")
    elif not real_success:
        print("\n‚ùå PROBLEMA: El m√©todo export_to_pdf tiene un error")
    else:
        print("\nüéâ ¬°Todo funciona correctamente!")

if __name__ == "__main__":
    main()
